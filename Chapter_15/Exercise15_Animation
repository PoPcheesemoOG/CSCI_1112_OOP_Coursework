/* Name: Paul Helske
 * Date: 05/18/2023
 */

package practice;

import javafx.animation.Animation.Status;
import javafx.application.Application;
import javafx.stage.Stage;
import javafx.animation.Timeline;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Polygon;
import javafx.collections.ObservableList;
import javafx.animation.PathTransition;
import javafx.animation.FadeTransition;

public class AnimationDemo extends Application {
	@Override
	public void start (Stage primaryStage) {
		Pane pane = new Pane();

		Polygon pentg = new Polygon(5);
		pentg.setFill(Color.BLUE);

		Rectangle rect = new Rectangle(60, 25);
		rect.setFill(Color.RED);

		ObservableList<Double> list = pentg.getPoints();
		final double WIDTH = 250, HEIGHT = 250;
		double centerX = WIDTH / 2, centerY = HEIGHT / 2;
		double radius = Math.min(WIDTH, HEIGHT) * 0.4;
		int sides = 5;

		for (int i =0; i < 5; i++) {
			list.add(centerX + radius * Math.cos(2 * i * Math.PI / 5));
			list.add(centerY + radius * Math.sin(2 * i * Math.PI / 5));
		}

		setPolygonSides(pentg, centerX, centerY, radius, sides);

		PathTransition pt = new PathTransition();
		pt.setDuration(Duration.millis(2000));
		pt.setPath(pentg);
		pt.setNode(rect);
		pt.setOrientation(PathTransition.OrientationType.ORTHOGONAL_TO_TANGENT);
		pt.setCycleCount(Timeline.INDEFINITE);
		pt.play();
		
		FadeTransition ft = new FadeTransition(Duration.millis(2000), rect);
		ft.setFromValue(1.0);
		ft.setToValue(0.01);
		ft.setCycleCount(Timeline.INDEFINITE);
		ft.setAutoReverse(true);
		ft.play();
		
		pentg.setOnMousePressed(e -> {
			System.out.println("LOL");
			if (pt.getStatus() == Status.RUNNING) {
				pt.pause();
				ft.pause();
			}

			else if (pt.getStatus() == Status.PAUSED) {
				pt.play();
				ft.play();
			}

		});

		pane.getChildren().addAll(pentg, rect);

		Scene scene = new Scene(pane, 250, 250);
		primaryStage.setTitle("BINGOBANGOBONGO");
		primaryStage.setScene(scene);
		primaryStage.show();

	}
	public static void main(String[] args) {
		launch(args);
	}

	private static void setPolygonSides(Polygon polygon, double centerX, double centerY, double radius, int sides) {
		polygon.getPoints().clear();
		final double angleStep = Math.PI * 2 / sides;
		double angle = 115;
		for (int i = 0; i < sides; i++, angle += angleStep) {
			polygon.getPoints().addAll(
					Math.sin(angle) * radius + centerX,
					Math.cos(angle) * radius + centerY
					);
		}
	}
}
